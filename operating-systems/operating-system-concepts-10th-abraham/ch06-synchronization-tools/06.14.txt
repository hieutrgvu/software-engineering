6.14 The first known correct software solution to the critical-section problem
for n processes with a lower bound on waiting of n − 1 turns was presented by
Eisenberg and McGuire. The processes share the following variables:

enum pstate {idle, want_in, in_cs};
pstate flag[n];
int turn;

All the elements of flag are initially idle. The initial value of turn is
immaterial (between 0 and n-1). The structure of process Pi is shown in Figure
6.19. Prove that the algorithm satisfies all three requirements for the
critical-section problem.

while (true) {
  while (true) {
    flag[i] = want_in;
    j = turn;

    while (j != i) {
      if (flag[j] != idle)
        j = turn;
      else
        j = (j + 1) % n;
    }

    flag[i] = in_cs;
    j = 0;

    while ( (j < n) && (j == i || flag[j] != in cs))
      j++;

    if ( (j >= n) && (turn == i || flag[turn] == idle))
      break;
  }

  /* critical section */

  j = (turn + 1) % n;

  while (flag[j] == idle)
    j = (j + 1) % n;

  turn = j;
  flag[i] = idle;

  /* remainder section */
}

Figure 6.19 The structure of process Pi in Dekker’s algorithm.

********************************************************************************
Resolved by: Intructor's Manual
********************************************************************************

This algorithm satisfies the three conditions. Before we show that the three
conditions are satisfied, we give a brief explanation of what the algorithm
does to ensure mutual exclusion. When a process i requires access to critical
section, it first sets its flag variable to want_in to indicate its desire. It
then performs the following steps: (1) It ensures that all processes whose
index lies between turn and i are idle. (2) If so, it updates its flag to in_cs
and checks whether there is already some other process that has updated its
flag to in_cs. (3) If not and if it is this process’s turn to enter the
critical section or if the process indicated by the turn variable is idle, it
enters the critical section. Given the above description, we can reason about
how the algorithm satisfies the requirements in the following manner:

1. Mutual exclusion is ensured: Notice that a process enters the critical
section only if the following requirements is satisfied: no other process has
its flag variable set to in_cs. Since the process sets its own flag variable
set to in_cs before checking the status of other processes, we are guaranteed
that no two processes will enter the critical section simultaneously.

2. Progress requirement is satisfied: Consider the situation where multiple
processes simultaneously set their flag variables to in_cs and then check
whether there is any other process has the flag variable set to in_cs. When
this happens, all processes realize that there are competing processes, enter
the next iteration of the outer while(1) loop and reset their flag variables to
want_in. Now the only process that will set its turn variable to in cs is the
process whose index is closest to turn. It is however possible that new
processes whose index values are even closer to turn might decide to enter the
critical section at this point and therefore might be able to simultaneously
set its flag to in_cs. These processes would then realize there are competing
processes and might restart the process of entering the critical section.
However, at each iteration, the index values of processes that set their flag
variables to in_cs become closer to turn and eventually we reach the following
condition: only one process (say k) sets its flag to in_cs and no other process
whose index lies between turn and k has set its flag to in cs. This process
then gets to enter the critical section.

3. Bounded-waiting requirement is met: The bounded waiting requirement is
satisfied by the fact that when a process k desires to enter the critical
section, its flag is no longer set to idle. Therefore, any process whose index
does not lie between turn and k cannot enter the critical section. In the
meantime, all processes whose index falls between turn and k and desire to
enter the critical section would indeed enter the critical section (due to the
fact that the system always makes progress) and the turn value monotonically
becomes closer to k. Eventually, either turn becomes k or there are no
processes whose index values lie between turn and k, and therefore process k
gets to enter the critical section.
