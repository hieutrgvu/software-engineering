6.11 One approach for using compare and swap() for implementing a spin-lock is
as follows:

void lock spinlock(int *lock) {
  while (compare and swap(lock, 0, 1) != 0)
    ; /* spin */
}

A suggested alternative approach is to use the “compare and compare-and-swap”
idiom, which checks the status of the lock before invoking the
compare_and_swap() operation. (The rationale behind this approach is to invoke
compare_and_swap() only if the lock is currently available.) This strategy is
shown below:

void lock spinlock(int *lock) {
  while (true) {
    if (*lock == 0) {
      /* lock appears to be available */
      if (!compare and swap(lock, 0, 1))
        break;
    }
  }
}

Does this “compare and compare-and-swap” idiom work appropriately for
implementing spinlocks? If so, explain. If not, illustrate how the integrity
of the lock is compromised.

********************************************************************************
Resolved by: Hieu Vu
********************************************************************************

+ The integrity of the lock is preserved but the meaning of "compare and
compare-and-swap" may be different from spinlock meaning.

+ The spinlock is a lock which causes a thread trying to acquire it to simply
wait in a loop ("spin") while repeatedly checking if the lock is available.

+ The "compare and compare-and-swap" does not try to acquire lock aggressively
like spinlock.
